import tempfile
import traceback
from pathlib import Path

import aiohttp
from aiohttp import web

from chatwoot_api.chatwoot_client import ChatwootClient
from openai_agents.functions.analyze_document import analyze_document
from settings import INBOX_TO_TRANSPORT
from openai_agents.functions.analyze_image import analyze_image
from bx24.bx_utils.parse_call_info import _extract_transcription_text
from openai_agents.transcribation_client import TranscribeClient
from telegram.send_log import send_dev_telegram_log
from utils.download_to_temp_file import download_to_temp
from utils.ffmpeg_convert_to_wav import convert_to_wav_via_imageio_ffmpeg
from utils.normalize_phone import normalize_phone
from wappi.wappi_client import WappiClient


async def inbound_wappi(request, agent_code, inbox_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç WAPPI Telegram API
    –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Chatwoot
    """
    try:
        data = await request.json()
        messages = data.get("messages")

        if not messages or not isinstance(messages, list):
            return web.Response(text="SKIP", status=200)

        message_data = messages[0]
        if not message_data.get("wh_type") == 'incoming_message':
            return web.Response(text="OK", status=200)

        message_text = message_data.get("body")
        contact_indentifier = message_data.get("from")
        if not contact_indentifier:
            # —Å–∫–∏–ø
            return web.Response(text="SKIP, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", status=200)

        if message_data.get('type') == 'image':
            download_url = message_data.get('file_link')
            image_summary = await analyze_image(base64_image=message_text)
            image_msg = f'[Summary –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏]:\n\n{image_summary}'
            caption = message_data.get("caption")
            message_text = f'[–°–û–û–ë–©–ï–ù–ò–ï –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú]\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{caption}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {download_url}\n\n{image_msg}'
        elif message_data.get('type') == 'ptt':
            async with aiohttp.ClientSession() as session:
                download_url = message_data.get('file_link')
                tmp_path = await download_to_temp(session, download_url, 'somefile.mp3')
                wav_path = Path(tempfile.gettempdir()) / (Path('somefile').stem + ".wav")
                await convert_to_wav_via_imageio_ffmpeg(tmp_path, str(wav_path))
                transcript = await TranscribeClient().transcribe(wav_path)
                audio_text = _extract_transcription_text(transcript)
                if audio_text and audio_text.strip():
                    header = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    message_text = f"{header}:\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª c –∞—É–¥–∏–æ: {download_url}\n\n[–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è]:\n{audio_text.strip()}"
        elif message_data.get('type') == 'document':
            download_url = message_data.get('file_link')
            document_summary = await analyze_document(download_url)
            document_msg = f'[Summary –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞]:\n\n{document_summary}'
            caption = message_data.get("caption")
            message_text = f'[–°–û–û–ë–©–ï–ù–ò–ï –° –î–û–ö–£–ú–ï–ù–¢–û–ú]\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{caption}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {download_url}\n\n{document_msg}'


        tg_config = INBOX_TO_TRANSPORT[inbox_id]
        wappi_instance_id, wappi_token = tg_config.get_waapi_params()

        async with WappiClient(wappi_token, wappi_instance_id) as client:
            contact = await client.get_contact(contact_indentifier)
            if not contact:
                await send_dev_telegram_log(f'[inbound_wappi]\n–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ TG: {contact_indentifier}', 'WARNING')
                return web.Response(text="SKIP –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ TG", status=200)

            phone = contact.get('number')
            if not phone:
                await send_dev_telegram_log(f'[inbound_wappi]\n–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ TG: {contact_indentifier}', 'WARNING')
                return web.Response(text="SKIP –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ TG", status=200)

        phone = normalize_phone(phone)
        identifier = phone.lstrip("+")

        async with ChatwootClient() as cw_client:
            cw_contact_id = await cw_client.get_contact_id(identifier)
            if not cw_contact_id:
                await send_dev_telegram_log(f'[inbound_wappi]\n–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –≤ CW!\nidentifier: {identifier}',
                                            'WARNING')
                return web.Response(text="SKIP –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –≤ CW", status=200)
            cw_conversation_id = await cw_client.get_conversation_id(cw_contact_id, inbox_id)
            if not cw_conversation_id:
                await send_dev_telegram_log(f'[inbound_wappi]\n–ù–µ –Ω–∞–π–¥–µ–Ω –¥–∏–∞–ª–æ–≥ –≤ CW!\ncontact_identifier: {identifier}\ninbox_id: {inbox_id}',
                                            'WARNING')
                return web.Response(text="SKIP –ù–µ –Ω–∞–π–¥–µ–Ω –¥–∏–∞–ª–æ–≥ –≤ CW!", status=200)
            await cw_client.send_message(cw_conversation_id, message_text, message_type=0)
            return web.Response(text="OK", status=200)


    except Exception as e:
        tb = traceback.format_exc()
        await send_dev_telegram_log(f'[inbound_wappi]\n–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {tb}', 'ERROR')
        return web.Response(text="ERROR", status=200)

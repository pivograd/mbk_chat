import contextlib
import os
import tempfile
import traceback
from pathlib import Path

import aiohttp
from aiohttp import web

from bx24.bx_utils.parse_call_info import _extract_transcription_text
from chatwoot_api.functions.safe_send_to_chatwoot import safe_send_to_chatwoot
from db.models.transport_activation import TransportActivation
from green_api.download_url import greenapi_download_url
from green_api.functions.get_instance_settings import get_instance_phone
from openai_agents.functions.analyze_image import analyze_image
from openai_agents.transcribation_client import TranscribeClient
from telegram.send_log import send_dev_telegram_log
from utils.download_to_temp_file import download_to_temp
from utils.ffmpeg_convert_to_wav import convert_to_wav_via_imageio_ffmpeg
from utils.normalize_phone import normalize_phone
from settings import INBOX_TO_TRANSPORT


async def inbound_green_api(request, agent_code, inbox_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç GREEN API
    –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Chatwoot
    """
    try:
        data = await request.json()
        wa_config = INBOX_TO_TRANSPORT.get(inbox_id)
        cw_config = wa_config.chatwoot

        type_webhook = data.get("typeWebhook")
        # C–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞
        if type_webhook == "stateInstanceChanged":
            state_instance = data.get("stateInstance")
            phone = await get_instance_phone(wa_config)
            if state_instance == 'notAuthorized':
                session_maker = request.app["db_sessionmaker"]
                async with session_maker() as session:
                    await TransportActivation.deactivate(session, inbox_id)
                await send_dev_telegram_log(f"[inbound_green_api]\n\n–ò–Ω—Å—Ç–∞–Ω—Å —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª—Å—è!\n@pivograd\n@kateradzivil\n@Im_Artem\n\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\ninbox_id={inbox_id}\n—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞={state_instance} ‚Üí is_active=False","STATUS", )
                return web.json_response({"status": "ok"})
            elif state_instance == 'authorized':
                session_maker = request.app["db_sessionmaker"]
                async with session_maker() as session:
                    await TransportActivation.activate(session, inbox_id)
                await send_dev_telegram_log(f"[inbound_green_api]\n\n–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏ –∏–Ω—Å—Ç–∞–Ω—Å!\n\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\ninbox_id={inbox_id}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞={state_instance} ‚Üí is_active=True","STATUS", )
                return web.json_response({"status": "ok"})
            elif state_instance == 'blocked':
                session_maker = request.app["db_sessionmaker"]
                async with session_maker() as session:
                    await TransportActivation.deactivate(session, inbox_id)
                await send_dev_telegram_log(f"[inbound_green_api]\n\n–ò–Ω—Å—Ç–∞–Ω—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n@pivograd\n@kateradzivil\n@Im_Artem\n\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\ninbox_id={inbox_id}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞={state_instance} ‚Üí is_active=False","STATUS", )
                return web.json_response({"status": "ok"})


        elif not type_webhook == "incomingMessageReceived":
            return web.json_response({"status": "ok"})

        sender_data = data.get("senderData", {})
        name = sender_data.get("senderName", "WhatsApp")
        message_data = data.get("messageData", {})
        chat_id = sender_data.get("chatId", "")

        phone = sender_data.get("sender", "").replace("@c.us", "")
        phone = normalize_phone(phone)
        if not phone:
            return web.json_response({"status": "ok"})

        message_type = message_data.get("typeMessage")
        # 1. –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_type == "textMessage":
            text_message = message_data.get("textMessageData", {}).get("textMessage", "")
            if text_message:
                await safe_send_to_chatwoot(phone, name, text_message, cw_config, message_type=0)

        # 2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif message_type == "extendedTextMessage":
            ext_data = message_data.get("extendedTextMessageData", {})
            message = ext_data.get("text", "")
            if message:
                await safe_send_to_chatwoot(phone, name, message, cw_config, message_type=0)

        # 3. –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        elif message_type == "quotedMessage":
            quoted_data = message_data.get("extendedTextMessageData", {})
            quoted_message = message_data.get("quotedMessage", {})
            reply_text = quoted_data.get("text", "")
            original_text = quoted_message.get("textMessage", "")
            full_message = f"–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n¬´{original_text}¬ª\n\n{reply_text}"
            if reply_text:
                await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)

        # 4a. –ö–∞—Ä—Ç–∏–Ω–∫–∏/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã
        elif message_type in ["documentMessage", "videoMessage"]:
            file_data = message_data.get("fileMessageData", {})
            message_id = data.get("idMessage")
            async with aiohttp.ClientSession() as session:
                res = await greenapi_download_url(session, wa_config, chat_id, message_id)
                if not res:
                    return web.json_response({"status": "ok"})
                download_url, file_name = res

            full_message = f"{download_url}"
            await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)

        # 4b. –ö–∞—Ä—Ç–∏–Ω–∫–∞/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        elif message_type == "imageMessage":
            message_id = data.get("idMessage")
            async with aiohttp.ClientSession() as session:
                res = await greenapi_download_url(session, wa_config, chat_id, message_id)
                if not res:
                    return web.json_response({"status": "ok"})
                download_url, file_name = res
            image_summary = await analyze_image(download_url)
            image_msg = f'[Summary –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏]:\n\n{image_summary}'
            caption = message_data.get("fileMessageData", {}).get("caption")
            full_message = f'[–°–û–û–ë–©–ï–ù–ò–ï –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú]\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{caption}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {download_url}\n\n{image_msg}'
            await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)
            await send_dev_telegram_log(f'[DEV LOG]\ndata: {data}\n', 'DEV')
            return web.json_response({"status": "ok"})

        # 4c. –ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
        elif message_type == "audioMessage":
            message_id = data.get("idMessage")
            async with aiohttp.ClientSession() as session:
                res = await greenapi_download_url(session, wa_config, chat_id, message_id)
                if not res:
                    await send_dev_telegram_log(f"[inbound_green_api.audioMessage]\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å downloadUrl\nmessage_id: {message_id}", 'WARNING')
                    return web.json_response({"status": "ok"})
                download_url, file_name = res

                tmp_path = None
                try:
                    tmp_path = await download_to_temp(session, download_url, file_name)
                    wav_path = Path(tempfile.gettempdir()) / (Path(file_name).stem + ".wav")
                    await convert_to_wav_via_imageio_ffmpeg(tmp_path, str(wav_path))

                    transcript = await TranscribeClient().transcribe(audio_file_path=str(wav_path))
                    text = _extract_transcription_text(transcript)
                    if text and text.strip():
                        header = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                        full_message = f"{header}:\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª c –∞—É–¥–∏–æ: {download_url}\n\n[–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è]:\n{text.strip()}"
                        await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)
                    else:
                        fallback_msg = f"{file_name}: {download_url}"
                        await safe_send_to_chatwoot(phone, name, fallback_msg, cw_config, message_type=0)

                except Exception as e:
                    await send_dev_telegram_log(
                        f"[inbound_green_api.audioMessage]\n–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}", 'WARNING')
                    fallback_msg = f"{file_name}: {download_url}"
                    await safe_send_to_chatwoot(phone, name, fallback_msg, cw_config, message_type=0)
                finally:
                    if tmp_path and os.path.exists(tmp_path):
                        with contextlib.suppress(Exception):
                            os.remove(tmp_path)

                    if wav_path and os.path.exists(wav_path):
                        with contextlib.suppress(Exception):
                            os.remove(wav_path)

        # 5. –ö–æ–Ω—Ç–∞–∫—Ç
        elif message_type == "contactMessage":
            contact_data = message_data.get("contactMessageData", {})
            contact_name = contact_data.get("displayName", "–ö–æ–Ω—Ç–∞–∫—Ç")
            vcard = contact_data.get("vcard", "")
            full_message = f"üìá –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç:\n{contact_name}\n{vcard}"
            await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)

        # 6. –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
        elif message_type == "locationMessage":
            location_data = message_data.get("locationMessageData", {})
            latitude = location_data.get("latitude")
            longitude = location_data.get("longitude")
            address = location_data.get("address", "")
            full_message = f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:\n–ê–¥—Ä–µ—Å: {address}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}"
            await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)

        # 7. –°—Ç–∏–∫–µ—Ä
        elif message_type == "stickerMessage":
            sticker_data = message_data.get("stickerMessageData", {})
            emoji = sticker_data.get("emoji", "")
            full_message = f"üü© –°—Ç–∏–∫–µ—Ä: {emoji or '–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä'}"
            await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)

        # 8. –û–ø—Ä–æ—Å
        elif message_type == "pollMessage":
            poll_data = message_data.get("pollMessageData", {})
            question = poll_data.get("name", "–û–ø—Ä–æ—Å")
            options = poll_data.get("options", [])
            options_text = ", ".join(opt.get("name", "") for opt in options)
            full_message = f"üìù –û–ø—Ä–æ—Å: {question}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {options_text}"
            await safe_send_to_chatwoot(phone, name, full_message, cw_config, message_type=0)

        return web.json_response({"status": "ok"})
    except Exception as e:
        tb = traceback.format_exc()
        await send_dev_telegram_log(
            f'[inbound_green_api]\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è WA\nTRACEBACK: {tb}', 'ERROR')
        return web.json_response({"status": "error"})
